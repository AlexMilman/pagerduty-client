{
  "name": "Pagerduty-client",
  "tagline": "Simple pager duty client with full integration with PagerDuty Events APIs v2",
  "body": "# PagerDuty Events Client for Java [![Build Status][travis-image]][travis-url]\r\n\r\n![][pagerduty-client-logo]\r\n\r\nPagerDuty Events Client aims to provide a full flexed Java client which is easy to use and integrates seamlessly\r\nwith PagerDuty Events API. Note that the library does not integrate with PagerDuty REST Api - it is only meant\r\nfor PagerDuty Events API. Please refer to the following link to see the differences between PagerDuty REST API and\r\nEvents API:\r\n\r\n[What is the difference between PagerDuty APIs?](https://support.pagerduty.com/hc/en-us/articles/214794907-What-is-the-difference-between-PagerDuty-APIs-)\r\n\r\n[![License][license-image]][license-url]  |\r\n[![version][maven-version]][maven-url]    |\r\n[![Build Status][travis-image]][travis-url]\r\n\r\n## Getting started\r\n\r\nPagerDutyEventsClient is really easy to create. The static method exposed with no parameters will create a new client\r\nwhich internally will default the API calls to PagerDuty Events API (events.pagerduty.com). Please note that as per\r\nPagerDUty Events documentation there is no need to use an ApiAccessKey to make calls to the events API - the service\r\ntoken is sufficient to trigger/acknowledge/resolve incidents.\r\n\r\nAn example on how to create the clients is as follows:\r\n\r\n```\r\nPagerDutyEventsClient pagerDutyEventsClient = PagerDutyEventsClient.create();\r\n```\r\n\r\nThe library supports the creation of three different type of incidents. For your reference, below are examples\r\non how to create each incident type as well as how to use PagerDutyEventsClient to perform the according operation:\r\n\r\n- **Trigger**: This will send a new 'trigger' incident to PagerDuty containing the details specified in the IncidentBuilder.\r\nA helper IncidentBuilder is provided for the sake of simplicity to ease with the creation of trigger incidents. The\r\ntrigger event requires two mandatory parameters:\r\n  - service_key (The GUID of one of your \"Generic API\" services. This is the \"Integration Key\" listed on a Generic\r\n    API's service detail page.)\r\n  - description: Text that will appear in the incident's log associated with this event.\r\nMore details can be provided to the incident as previously mentioned by calling the available methods offered by the\r\nIncidentBuilder.\r\n```\r\nIncident incident = Incident.IncidentBuilder\r\n        .trigger(\"SERVICE_KEY\", \"INCIDENT DESCRIPTION\")\r\n        .client(\"Creacodetive - PagerDutyClient\")\r\n        .clientUrl(\"http://www.creacodetive.com\")\r\n        .details(\"This is an incident test to test PagerDutyClient\")\r\n        .build();\r\npagerDutyEventsClient.trigger(incident);\r\n```\r\n\r\n- **Acknowledge**: This will send a new acknowledge incident to PagerDuty based upon the 'serviceKey' and 'incidentKey'\r\nprovided.\r\n```\r\nIncident incident = Incident.IncidentBuilder.acknowledge(\"SERVICE_KEY\", \"INCIDENT_KEY\");\r\npagerDutyEventsClient.acknowledge(incident);\r\n```\r\n\r\n- **Resolve**: This will send a new resolve incident to PagerDuty based upon the 'service_key' and 'incident_key' provided.\r\n```\r\nIncident incident = Incident.IncidentBuilder.resolve(\"SERVICE_KEY\", \"INCIDENT_KEY\");\r\npagerDutyEventsClient.resolve(incident);\r\n```\r\n\r\n## Integration:\r\n\r\n[PagerDuty Events Client](http://search.maven.org/#search|ga|1|dikhan) can be easily integrated in other projects by\r\nadding the following snippet to the pom:\r\n\r\n```\r\n<dependency>\r\n  <groupId>com.github.dikhan</groupId>\r\n  <artifactId>pagerduty-client</artifactId>\r\n  <version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\nThe library uses SL4J facade for logging purposes. Thus, making it fully flexible for integration with other\r\nprojects whereby a specific logging implementation is already being used (e,g: log4j, logback, etc).\r\n\r\nSnapshots of dev versions can be found at [oss.sonatype.org](https://oss.sonatype.org/content/repositories/snapshots/com/github/dikhan/pagerduty-client/)\r\n\r\n## Contributing\r\n\r\n- Fork it!\r\n- Create your feature branch: git checkout -b my-new-feature\r\n- Commit your changes: git commit -am 'Add some feature'\r\n- Push to the branch: git push origin my-new-feature\r\n- Submit a pull request :D\r\n\r\n## Authors\r\n\r\nDaniel I. Khan Ramiro - Cisco Systems\r\n\r\nSee also the list of [contributors](https://github.com/dikhan/pagerduty-client/graphs/contributors) who participated in this project.\r\n\r\n## Acknowledgements:\r\n\r\n- ApiService calls: http://unirest.io/java.html\r\n- Java objects serialization: https://github.com/FasterXML/jackson\r\n- Testing: http://www.mock-server.com/\r\n\r\n\r\n[pagerduty-client-logo]: https://d17oy1vhnax1f7.cloudfront.net/items/0Q3Q3m1W0F230F2l1P1P/PagerDuty_icon_512x512.png?v=f4f9fdf0\r\n\r\n\r\n[license-url]: https://github.com/dikhan/pagerduty-client/blob/master/LICENSE\r\n[license-image]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat\r\n\r\n[travis-url]: https://travis-ci.org/dikhan/pagerduty-client\r\n[travis-image]: https://travis-ci.org/dikhan/pagerduty-client.svg?branch=master\r\n\r\n[maven-url]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22pagerduty-client%22\r\n[maven-version]: https://img.shields.io/maven-central/v/com.github.dikhan/pagerduty-client.svg?style=flat\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}